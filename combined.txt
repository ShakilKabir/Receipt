import {
  BrowserRouter as Router,
  Route,
  Routes,
  useNavigate
} from "react-router-dom";
import { useEffect, useState } from "react";
import logo from "./assets/logo.jpg";
// import barcode from "./assets/barcode.png";
import { ToastContainer, toast } from "react-toastify";
import Barcode from "react-barcode";
import Receipt from "./pages/receipt";
import Navbar from "./pages/Navbar";
import LoginPage from "./pages/Login";
import AdminPage from "./pages/Admin";
import ReceiptPage from "./pages/ReceiptPage";
import HistoryPage from "./pages/History";
import { jwtDecode } from "jwt-decode";

function App() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [show, setShow] = useState(false);
  const [userRole, setUserRole] = useState(null);
  const navigate = useNavigate();
  const [barcodeShow, setBarcodeShow] = useState(false);

  const [formData, setFormData] = useState({
    address: "",
    managerName: "",
    managerCode: "",
    dateTimeStatusCode: "",
    dateTimeStatusType: "",
    date: "",
    time: "",
    tax: "",
    cashAmount: "",
    showSecondPart: false,
    userId: "",
    userPassword: "",
    barcode: "",
    barcodeFour: "",
    policyId: "",
    policyDays: "",
    policyDate: "",
    products: [
      {
        productId: "",
        productPrice: "",
        productName: "",
        productDescription2: "",
        productDescription3: "",
        productDescription4: "",
        productDescription5: "",
        productDescription6: "",
      },
    ],
  });

  const [errors, setErrors] = useState({});

  useEffect(() => {
    updateBarcode();
  }, [formData.dateTimeStatusCode, formData.date]);

    useEffect(() => {
    // Check if the token exists in localStorage
    const token = localStorage.getItem("token");
    if (token) {
      try {
        // Decode the token to get the user role
        const decodedToken = jwtDecode(token);
        setUserRole(decodedToken.role);
        setIsAuthenticated(true);
      } catch (error) {
        console.error("Error decoding token:", error);
        setIsAuthenticated(false);
        setUserRole(null);
      }
    }
  }, []);


  const handleChange = (e) => {
    const { name, type, value, checked } = e.target;
    setFormData({
      ...formData,
      [name]: type === "checkbox" ? checked : value,
    });
    validateField(name, value);
  };

  const handleProductChange = (index, e) => {
    const { name, value } = e.target;
    const products = [...formData.products];
    products[index] = { ...products[index], [name]: value };
    setFormData({
      ...formData,
      products,
    });
    validateProductField(index, name, value);
  };

  const addProduct = () => {
    setFormData({
      ...formData,
      products: [
        ...formData.products,
        {
          productId: "",
          productName: "",
          productPrice: "",
          productDescription2: "",
          productDescription3: "",
          productDescription4: "",
          productDescription5: "",
          productDescription6: "",
        },
      ],
    });
  };

  const removeProduct = (index) => {
    const products = formData.products.filter((_, i) => i !== index);
    setFormData({
      ...formData,
      products,
    });
  };

  const validateField = (name, value) => {
    let error = "";

    switch (name) {
      case "dateTimeStatusCode":
        if (value.length !== 14) {
          error = "Must be 14 characters.";
        }
        break;
      case "barcode":
        if (value.length !== 15) {
          error = "Must be 15 characters.";
        }
        break;
      case "barcodeFour":
        if (value.length !== 4) {
          error = "Must be 4 characters.";
        }
        break;
      case "userId":
        if (formData.showSecondPart && value.length !== 15) {
          error = "Must be 15 characters.";
        }
        break;
      case "managerCode":
        if (value.length !== 10) {
          error = "Must be 10 characters.";
        }
        break;
      case "userPassword":
        if (formData.showSecondPart && value.length !== 11) {
          error = "Must be 11 characters.";
        }
        break;
      default:
        break;
    }

    setErrors((prevErrors) => ({
      ...prevErrors,
      [name]: error,
    }));
  };

  const validateProductField = (index, name, value) => {
    let error = "";

    if (name === "productId" && value.length > 15) {
      error = "Max 15 characters.";
    }

    setErrors((prevErrors) => ({
      ...prevErrors,
      [`productId_${index}`]: error,
    }));
  };

  const formatDate = (dateStr) => {
    if (!dateStr) return "";
    const [year, month, day] = dateStr.split("-");
    return `${month}/${day}/${year.slice(2)}`;
  };

  const formatDateWithFullYear = (dateStr) => {
    if (!dateStr) return "";
    const [year, month, day] = dateStr.split("-");
    return `${month}/${day}/${year}`;
  };

  const formatTimeTo12Hour = (time) => {
    if (!time) return { time12: "", ampm: "" };

    const [hours, minutes] = time.split(":").map(Number);
    const ampm = hours >= 12 ? "PM" : "AM";
    const hours12 = (hours % 12 || 12).toString().padStart(2, "0");
    const minutesFormatted = minutes?.toString().padStart(2, "0");

    return { time12: `${hours12}:${minutesFormatted}`, ampm };
  };

  const { time } = formData;
  const { time12, ampm } = formatTimeTo12Hour(time);

  const calculateSubtotal = () => {
    return formData.products
      .reduce((sum, product) => {
        const price = parseFloat(product.productPrice) || 0;
        return sum + price;
      }, 0)
      .toFixed(2);
  };

  const getTotal = () => {
    const subtotal = parseFloat(calculateSubtotal()) || 0;
    const tax = parseFloat(formData.tax) || 0;
    return (subtotal + tax).toFixed(2);
  };

  const getChargeDue = () => {
    const total = parseFloat(getTotal()) || 0;
    const cashAmount = parseFloat(formData.cashAmount) || 0;
    return (cashAmount - total).toFixed(2);
  };

  const updateBarcode = () => {
    const { dateTimeStatusCode, date } = formData;
    if (dateTimeStatusCode && date) {
      const barcode = `${date.substring(5, 7)}${date.substring(
        8,
        10
      )}${date.substring(3, 4)}${dateTimeStatusCode.substring(
        7,
        13
      )}${dateTimeStatusCode.substring(0, 4)}`;
      setFormData({
        ...formData,
        barcode,
      });
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    if (!isAuthenticated) {
      toast.error("You must be logged in to submit the form.");
      navigate("/login");
      return;
    }  

    validateField("dateTimeStatusCode", formData.dateTimeStatusCode);
    validateField("barcode", formData.barcode);
    if (formData.showSecondPart) {
      validateField("userId", formData.userId);
      validateField("userPassword", formData.userPassword);
    }

    formData.products.forEach((product, index) => {
      validateProductField(index, "productId", product.productId);
    });

    const hasErrors = Object.values(errors).some((error) => error);

    if (
      !formData.address ||
      !formData.managerName ||
      !formData.managerCode ||
      !formData.dateTimeStatusCode ||
      !formData.dateTimeStatusType ||
      !formData.date ||
      !formData.time ||
      !formData.tax ||
      !formData.cashAmount ||
      !formData.barcode ||
      !formData.policyId ||
      !formData.policyDays ||
      !formData.policyDate ||
      hasErrors
    ) {
      toast.error(
        "All fields are required and must meet the validation criteria!"
      );
      return;
    }

    if (formData.showSecondPart) {
      if (!formData.userId || !formData.userPassword) {
        toast.error(
          "User ID and User Password are required when showing the second part!"
        );
        return;
      }
    }

    navigate('/receipt', { 
      state: { 
        formData, 
        time12, 
        ampm
      }
    });

    setFormData({
      address: "",
      managerName: "",
      managerCode: "",
      dateTimeStatusCode: "",
      dateTimeStatusType: "",
      date: "",
      time: "",
      tax: "",
      cashAmount: "",
      showSecondPart: false,
      userId: "",
      userPassword: "",
      barcode: "",
      barcodeFour: "",
      policyId: "",
      policyDays: "",
      policyDate: "",
      products: [
        {
          productId: "",
          productPrice: "",
          productName: "",
          productDescription2: "",
          productDescription3: "",
          productDescription4: "",
          productDescription5: "",
          productDescription6: "",
        },
      ],
    });
    
    // setShow(true);
    toast.success("Successfully receipt generated!");
  };

  return (
    <>
      <Navbar
        isAuthenticated={isAuthenticated}
        setIsAuthenticated={setIsAuthenticated}
        userRole={userRole}
        setUserRole={setUserRole}
      />
      <Routes>
        <Route
          path="/login"
          element={
            <LoginPage
              setIsAuthenticated={setIsAuthenticated}
              setUserRole={setUserRole}
            />
          }
        />
        <Route
          path="/generate"
          element={
              !show ? (
                <>
                  <form onSubmit={handleSubmit}>
                    <div
                      className="input_container"
                      style={{ marginBottom: "10px" }}
                    >
                      <div className="logo_container">
                        <img className="logo" src={logo} alt="logo" />
                      </div>
                      <div className="address_name">
                        <div className="address">
                          <input
                            type="text"
                            name="address"
                            placeholder="Address"
                            value={formData.address}
                            onChange={handleChange}
                          />
                        </div>
                        <div className="name_code">
                          <div className="name">
                            {/* <span>STORE MGR.</span>{" "} */}
                            <input
                              type="text"
                              name="managerName"
                              placeholder="STORE MGR."
                              value={formData.managerName}
                              onChange={handleChange}
                            />
                          </div>
                          <div className="code">
                            <input
                              type="number"
                              name="managerCode"
                              placeholder="Mobile No."
                              value={formData.managerCode}
                              onChange={handleChange}
                            />
                            {errors.managerCode && (
                              <p style={{ color: "red" }}>
                                {errors.managerCode}
                              </p>
                            )}
                          </div>
                        </div>
                      </div>

                      <div className="date_time_status" style={{ gap: "4px" }}>
                        <div>
                          <div>
                            <input
                              type="text"
                              name="dateTimeStatusCode"
                              placeholder="25025678989295"
                              value={formData.dateTimeStatusCode}
                              onChange={handleChange}
                            />
                            {errors.dateTimeStatusCode && (
                              <p style={{ color: "red" }}>
                                {errors.dateTimeStatusCode}
                              </p>
                            )}
                          </div>
                          <div>
                            <input
                              type="text"
                              style={{ marginTop: "4px" }}
                              name="dateTimeStatusType"
                              placeholder="SALE SELF CHECK OUT"
                              value={formData.dateTimeStatusType}
                              onChange={handleChange}
                            />
                          </div>
                        </div>
                        <div className="date_time">
                          <div>
                            <input
                              type="date"
                              name="date"
                              value={formData.date}
                              onChange={handleChange}
                            />
                          </div>
                          <div>
                            <input
                              type="time"
                              name="time"
                              value={formData.time}
                              onChange={handleChange}
                            />
                          </div>
                        </div>
                      </div>

                      <div className="products">
                        {formData.products.map((product, index) => (
                          <div key={index} className="product">
                            <div className="productInputDivide">
                              <input
                                type="text"
                                name="productId"
                                placeholder="Product ID"
                                value={product.productId}
                                onChange={(e) => handleProductChange(index, e)}
                              />
                              {errors[`productId_${index}`] && (
                                <p style={{ color: "red" }}>
                                  {errors[`productId_${index}`]}
                                </p>
                              )}
                              <input
                                type="number"
                                name="productPrice"
                                placeholder="Product Price"
                                value={product.productPrice}
                                onChange={(e) => handleProductChange(index, e)}
                              />
                            </div>
                            <div>
                              <input
                                type="text"
                                style={{ marginTop: "4px" }}
                                name="productName"
                                placeholder="Product Description Line 1 with <A>"
                                value={product.productName}
                                onChange={(e) => handleProductChange(index, e)}
                              />
                            </div>
                            <div className="productInputDivide">
                              <input
                                type="text"
                                style={{ marginTop: "4px" }}
                                name="productDescription2"
                                placeholder="Line 2"
                                value={product.productDescription2}
                                onChange={(e) => handleProductChange(index, e)}
                              />
                              <div
                                style={{
                                  marginTop: "4px",
                                  display: "flex",
                                  height: "35px",
                                  gap: "8px",
                                }}
                              >
                                <button
                                  style={{ width: "40px" }}
                                  type="button"
                                  onClick={() => removeProduct(index)}
                                >
                                  -
                                </button>
                                <button
                                  style={{ width: "40px" }}
                                  type="button"
                                  onClick={addProduct}
                                >
                                  +
                                </button>
                              </div>
                              {/* <input
                      type="text"
                      style={{ marginTop: "4px" }}
                      name="productDescription3"
                      placeholder="Line 3"
                      value={product.productDescription3}
                      onChange={(e) => handleProductChange(index, e)}
                    /> */}
                            </div>
                            {/* <div className="productInputDivide">
                    <input
                      type="text"
                      style={{ marginTop: "4px" }}
                      name="productDescription4"
                      placeholder="Line 4"
                      value={product.productDescription4}
                      onChange={(e) => handleProductChange(index, e)}
                    />
                    <input
                      type="text"
                      style={{ marginTop: "4px" }}
                      name="productDescription5"
                      placeholder="Line 5"
                      value={product.productDescription5}
                      onChange={(e) => handleProductChange(index, e)}
                    />
                  </div> */}
                            {/* <div className="productInputDivide">
                    <input
                      type="text"
                      style={{ marginTop: "4px" }}
                      name="productDescription6"
                      placeholder="Line 6"
                      value={product.productDescription6}
                      onChange={(e) => handleProductChange(index, e)}
                    />
                    
                  </div> */}
                            <hr style={{ margin: "8px 0" }} />
                          </div>
                        ))}
                      </div>

                      <div className="calculation" style={{ gap: "4px" }}>
                        <div className="subtotal">
                          <p>SUBTOTAL</p>
                          <p>{calculateSubtotal()}</p>
                        </div>
                        <div className="sales_tax">
                          <p>SALES TAX:</p>
                          <div>
                            <input
                              type="number"
                              name="tax"
                              placeholder="Tax"
                              value={formData.tax}
                              onChange={handleChange}
                            />
                          </div>
                        </div>
                        <div className="total">
                          <p>TOTAL</p>
                          <p>${getTotal()}</p>
                        </div>
                        <div className="cash">
                          <p>CASH</p>
                          <div>
                            <input
                              type="number"
                              name="cashAmount"
                              placeholder="Cash Amount"
                              value={formData.cashAmount}
                              onChange={handleChange}
                            />
                          </div>
                        </div>
                        <div className="charge_due">
                          <p>CHANGE DUE</p>
                          <p>{getChargeDue()}</p>
                        </div>
                      </div>

                      <div className="barcode">
                        <p className="barcode_time_date">
                          <span>
                            {formData.dateTimeStatusCode?.substring(0, 4)}
                          </span>
                          <span>{formatDate(formData.date)}</span>
                          <span>{time12}</span>
                          <span>{ampm}</span>
                        </p>
                        {/* <img className="barcode_image" src={barcode} alt="logo" /> */}
                        {/* <input
                type="text"
                name="barcode"
                placeholder="Barcode"
                value={formData.barcode}
                onChange={handleChange}
                style={{ marginTop: "4px" }}
              />
              {errors.barcode && (
                <p style={{ color: "red" }}>{errors.barcode}</p>
              )} */}
                        {formData.barcode && (
                          <Barcode
                            value={formData.barcode}
                            width={3.5}
                            fontSize={0}
                          />
                        )}
                        <div style={{ textAlign: "right" }}>
                          <input
                            type="text"
                            name="barcodeFour"
                            placeholder="Barcode Four Digit"
                            value={formData.barcodeFour}
                            onChange={handleChange}
                            style={{ marginTop: "4px", width: "140px" }}
                          />
                        </div>
                        {errors.barcodeFour && (
                          <p style={{ color: "red" }}>{errors.barcodeFour}</p>
                        )}
                        {/* <p className="barcode_lower">2502 51 89295 05/04/2024 4300</p> */}
                      </div>

                      <div className="return_policy">
                        <p className="title">RETURN POLICY DEFINITIONS</p>
                        <div className="expire" style={{ gap: "4px" }}>
                          <div>
                            <p>POLICY ID</p>
                            <input
                              type="text"
                              name="policyId"
                              placeholder="Policy ID"
                              value={formData.policyId}
                              onChange={handleChange}
                            />
                          </div>
                          <div>
                            <p>DAYS</p>
                            <input
                              type="number"
                              name="policyDays"
                              placeholder="Policy Days"
                              value={formData.policyDays}
                              onChange={handleChange}
                            />
                          </div>
                          <div>
                            <p>POLICY EXPIRES ON</p>
                            <input
                              type="date"
                              name="policyDate"
                              placeholder="Policy Date"
                              value={formData.policyDate}
                              onChange={handleChange}
                            />
                          </div>
                        </div>
                      </div>

                      <div className="showSecondPartContainer">
                        <input
                          type="checkbox"
                          name="showSecondPart"
                          checked={formData.showSecondPart}
                          onChange={handleChange}
                        />
                        <p>Show Second Part</p>
                      </div>

                      {formData.showSecondPart && (
                        <>
                          <p className="star">
                            ********************************************************
                          </p>
                          <p className="did_we_nail_it">DID WE NAIL IT?</p>
                        </>
                      )}

                      <div className="footer">
                        {formData.showSecondPart && (
                          <>
                            <p>
                              Take a short survey for a chance TO WIN A $5,000
                              HOME DEPOT GIFT CARD
                            </p>
                            <div className="middle">
                              <p>Opine en español</p>
                              <p className="link">wwww.homedepot.com/survey</p>
                              <div>
                                <div
                                  style={{
                                    display: "grid",
                                    gap: "4px",
                                    gridTemplateColumns: "auto 1fr",
                                    alignItems: "center",
                                  }}
                                >
                                  <span>User ID:</span>{" "}
                                  <input
                                    type="text"
                                    name="userId"
                                    placeholder="User ID"
                                    value={formData.userId}
                                    onChange={handleChange}
                                  />
                                  {errors.userId && (
                                    <p style={{ color: "red" }}>
                                      {errors.userId}
                                    </p>
                                  )}
                                </div>
                                <div
                                  style={{
                                    display: "grid",
                                    gap: "4px",
                                    gridTemplateColumns: "auto 1fr",
                                    alignItems: "center",
                                    marginTop: "4px",
                                  }}
                                >
                                  <span>PASSWORD:</span>{" "}
                                  <input
                                    type="password"
                                    name="userPassword"
                                    placeholder="User Password"
                                    value={formData.userPassword}
                                    onChange={handleChange}
                                  />
                                  {errors.userPassword && (
                                    <p style={{ color: "red" }}>
                                      {errors.userPassword}
                                    </p>
                                  )}
                                </div>
                              </div>
                            </div>
                            <p>
                              Entries must be completed within 14 days Of
                              purchase. Entrants must be 18 or Older to enter.
                              See the complete rules on website. No purchase
                              necessary.
                            </p>
                          </>
                        )}
                        <button
                          type="submit"
                          style={{
                            width: "100px",
                            height: "30px",
                            marginTop: "10px",
                          }}
                        >
                          Submit
                        </button>
                      </div>
                    </div>
                  </form>
                  {!show && (
                    <Receipt
                      formData={formData}
                      time12={time12}
                      ampm={ampm}
                      formatDate={formatDate}
                      formatDateWithFullYear={formatDateWithFullYear}
                      calculateSubtotal={calculateSubtotal}
                      getTotal={getTotal}
                      getChargeDue={getChargeDue}
                      containerClass={`container1 ${!isAuthenticated ? "blurred" : ""}`}
                    />
                  )}
                  {/* {show && (
                    <Receipt
                      formData={formData}
                      time12={time12}
                      ampm={ampm}
                      formatDate={formatDate}
                      formatDateWithFullYear={formatDateWithFullYear}
                      calculateSubtotal={calculateSubtotal}
                      getTotal={getTotal}
                      getChargeDue={getChargeDue}
                      containerClass="container"
                    />
                  )} */}
                </>
              ) : (
                <Receipt
                  formData={formData}
                  time12={time12}
                  ampm={ampm}
                  formatDate={formatDate}
                  formatDateWithFullYear={formatDateWithFullYear}
                  calculateSubtotal={calculateSubtotal}
                  getTotal={getTotal}
                  getChargeDue={getChargeDue}
                  containerClass="container"
                />
              )
          }
        />
        <Route
          path="/"
          element={
            <div className="home-page">
              <img
                src={logo}
                alt="logo"
                className="home-logo"
                onClick={() => navigate("/generate")}
                style={{ cursor: "pointer" }}
              />
            </div>
          }
        />
                <Route
          path="/admin"
          element={
            isAuthenticated && userRole === 'admin' ? (
              <AdminPage /> // Only allow access if the user is authenticated and has the admin role
            ) : (
              <LoginPage
                setIsAuthenticated={setIsAuthenticated}
                setUserRole={setUserRole}
              />
            )
          }
        />
        <Route
        path="/receipt"
        element={
          isAuthenticated ? (
            <ReceiptPage />
          ) : (
            <LoginPage
              setIsAuthenticated={setIsAuthenticated}
              setUserRole={setUserRole}
            />
          )
        }
      />
              <Route
          path="/history"
          element={isAuthenticated ? <HistoryPage /> : <LoginPage setIsAuthenticated={setIsAuthenticated} setUserRole={setUserRole} />}
        />
      </Routes>
      <ToastContainer />
      </>
  );
}

export default App;
/* 
    1. Need to work with font size
    8.5=11.33, 15=20, 10=13.33, 10.5=14, 
    2. Font family 
*/
@import url('https://fonts.googleapis.com/css2?family=Courier+Prime&display=swap');

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: "Courier Prime", monospace;
  font-weight: 400;
  font-style: normal;
  letter-spacing: -1px;
}

body {
  background-color: #ddd;
}

.address_name,
.date_time_status,
.products,
.calculation {
  font-size: 11.33px;
}
.subtotal, .sales_tax, .total, .cash, .charge_due {
  display: flex;
  width: 140px;
  justify-content: space-between;
}

.container1 {
  margin: 0 auto;
  width: 375px;
  padding: 0 30px;
  background-color: white;
}

.container {
  margin: 0 auto;
  width: 300px;
  padding: 0 30px;
  background-color: white;
}

.logo_container {
  padding-top: 50px;
}
.logo_container .logo {
  width: 236px;
  height: 84.5px;
  display: block;
  margin: 0 auto 32px;
}

.address_name {
  margin-bottom: 16px;
  font-family: "Courier Prime", monospace;
  font-weight: 400;
  font-style: normal;
}
.address_name .address {
  text-align: center;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.address_name .name_code {
  display: flex;
  justify-content: space-between;
  gap: 4px;
  padding: 0 8px;
}
.address_name .name_code .name {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.date_time_status {
  margin-bottom: 16px;
  display: flex;
  justify-content: space-between;
}
.date_time_status .date_time {
  display: flex;
  gap: 8px;
}

.products {
  margin-bottom: 12px;
}
.products .product {
  display: flex;
  gap: 4px;
  align-items: end;
  justify-content: space-between;
}
.products .product .product_name {
  margin: 0;
  position: relative;

}
.products .product .product_name .text-content {
  display: inline-block;
  text-indent: -16px;
  padding-left: 16px; 
}

.calculation {
  display: flex;
  flex-direction: column;
  align-items: end;
}
.calculation .charge_due {
  padding-left: 16px;
}

.barcode {
margin: 32px 0 16px;
}
.barcode .barcode_time_date {
  display: flex;
  justify-content: space-between;
  font-size: 20px;
  margin-bottom: -8px;
  margin-left: -6px;
  margin-right: -6px;
  position: relative;
  z-index: 9;
}
.barcode svg {
  width: 88%;
  height: 55px;
  display: block;
  margin: 0 auto;
}
.barcode .barcode_lower {
  font-size: 12.33px;
  text-align: center;
  /* line-height: 6px; */
  /* line-height: 85%; */
  margin-top: -6px;
  position: relative;
}

.return_policy {
  font-size: 11.33px;
  padding-bottom: 16px
}
.return_policy .title {
  text-align: center;
}
.return_policy .expire {
  /* padding-left: 8px; */
  padding-right: 8px;
  display: flex;
  justify-content: space-between;
  align-items: end;
}
.return_policy .expire .center {
  display: flex;
  justify-content: center;
}

.star {
  font-size: 11.33px;
  text-align: center;
}
.did_we_nail_it {
  font-size: 14px;
  text-align: center;
  font-weight: bold;
  letter-spacing: 3px;
}

.footer {
  text-align: center;
  font-size: 11.33px;
  padding-bottom: 50px;
}
.footer .middle, .link {
  margin: 8px 0 16px;
}

/* input field css start from here  */
.input_container {
  margin: 0 auto;
  width: 375px;
  padding: 0 20px;
  background-color: white;
}

.input_container input {
  width: 100%;
  height: 35px;
  padding-left: 5px;
  border-radius: 3px;
}
.input_container .name_code {
  padding: 0;
  margin-top: 5px;
  gap: 4px;
  align-items: end;
}
.input_container .name_code .name input {
  width: 97px;
}
.input_container .products .product {
  display: unset;
  align-items: unset;
}
.input_container .products .product .productInputDivide {
  display: flex;
  gap: 4px;
}

.input_container .subtotal, .input_container .sales_tax, .input_container .total, .input_container .cash, .input_container .charge_due {
  display: flex;
  width: 255px;
  justify-content: space-between;
  align-items: center;
}
.input_container .showSecondPartContainer{
    display: flex;
    justify-content: center;
    gap: 8px;
    margin-bottom: 12px;
    font-size: 20px;
}
.input_container .showSecondPartContainer input{
    width: 15px;
    height: 15px;
    margin-top: 2px;
}

/* src/pages/AdminPage.css */
.admin-container {
  padding: 20px;
}

.admin-section {
  margin-bottom: 30px;
}

.admin-section form {
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.admin-section form input,
.admin-section form select {
  padding: 8px;
  font-size: 16px;
}

.admin-section form button {
  padding: 10px;
  font-size: 16px;
  background-color: #007bff;
  color: white;
  border: none;
  cursor: pointer;
}

.admin-section form button:hover {
  background-color: #0056b3;
}

/* src/index.css or src/App.css */

/* src/index.css or src/App.css */

.home-page {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background-color: #f0f0f0;
}

.home-logo {
  width: 300px;
  height: auto;
  padding: 20px;
  border: 5px solid #007bff; /* Blue border */
  border-radius: 10px;
  background-color: #fff; /* White background */
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Subtle shadow */
  transition: transform 0.3s ease, box-shadow 0.3s ease; /* Smooth transition */
  cursor: pointer;
}

.home-logo:hover {
  transform: scale(1.05); /* Slightly larger on hover */
  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2); /* Deeper shadow on hover */
}

.blurred {
  filter: blur(2px); /* Adjust the blur value as needed */
  pointer-events: none; /* Prevent interaction */
  opacity: 0.7; /* Add a slight transparency if desired */
}

#barcode {
  display: inline-block; /* Ensures that the barcode is not stretched */
  text-align: center; /* Centers the barcode within the div */
  width: auto; /* Allow the barcode to maintain its natural width */
}
import React from 'react';
import { createRoot } from 'react-dom/client';
import { BrowserRouter as Router } from 'react-router-dom';
import App from './App.jsx';
import './index.css';
import "react-toastify/dist/ReactToastify.css";

const root = createRoot(document.getElementById('root'));
root.render(
  <Router>
    <App />
  </Router>
);
import React, { useState } from 'react';
import axios from '../utils/axiosConfig';
import { toast } from 'react-toastify';
import {
  Container,
  Grid,
  Typography,
  TextField,
  Button,
  Paper,
  Box,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
} from '@mui/material';

const AdminPage = () => {
  const [passwordData, setPasswordData] = useState({ oldPassword: '', newPassword: '' });
  const [newUserData, setNewUserData] = useState({ username: '', password: '', role: 'user' });

  const handlePasswordChange = (e) => {
    const { name, value } = e.target;
    setPasswordData({ ...passwordData, [name]: value });
  };

  const handleNewUserChange = (e) => {
    const { name, value } = e.target;
    setNewUserData({ ...newUserData, [name]: value });
  };

  const handlePasswordSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('/auth/change-password', { ...passwordData }); // Use actual userId
      toast.success(response.data.message);
      setPasswordData({ oldPassword: '', newPassword: '' });
    } catch (error) {
      toast.error(error.response.data.error || 'Password change failed');
    }
  };

  const handleNewUserSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('/auth/register', newUserData);
      toast.success(response.data.message);
      setNewUserData({ username: '', password: '', role: 'user' });
    } catch (error) {
      toast.error(error.response.data.error || 'User registration failed');
    }
  };

  return (
    <Container maxWidth="md">
      <Typography variant="h4" gutterBottom>
        Admin Dashboard
      </Typography>

      <Grid container spacing={4}>
        <Grid item xs={12} md={6}>
          <Paper elevation={3}>
            <Box p={3}>
              <Typography variant="h6" gutterBottom>
                Change Password
              </Typography>
              <form onSubmit={handlePasswordSubmit}>
                <TextField
                  type="password"
                  name="oldPassword"
                  label="Old Password"
                  variant="outlined"
                  fullWidth
                  margin="normal"
                  value={passwordData.oldPassword}
                  onChange={handlePasswordChange}
                />
                <TextField
                  type="password"
                  name="newPassword"
                  label="New Password"
                  variant="outlined"
                  fullWidth
                  margin="normal"
                  value={passwordData.newPassword}
                  onChange={handlePasswordChange}
                />
                <Button variant="contained" color="primary" type="submit" fullWidth>
                  Change Password
                </Button>
              </form>
            </Box>
          </Paper>
        </Grid>

        <Grid item xs={12} md={6}>
          <Paper elevation={3}>
            <Box p={3}>
              <Typography variant="h6" gutterBottom>
                Add New User
              </Typography>
              <form onSubmit={handleNewUserSubmit}>
                <TextField
                  type="text"
                  name="username"
                  label="Username"
                  variant="outlined"
                  fullWidth
                  margin="normal"
                  value={newUserData.username}
                  onChange={handleNewUserChange}
                />
                <TextField
                  type="password"
                  name="password"
                  label="Password"
                  variant="outlined"
                  fullWidth
                  margin="normal"
                  value={newUserData.password}
                  onChange={handleNewUserChange}
                />
                <FormControl fullWidth margin="normal">
                  <InputLabel>Role</InputLabel>
                  <Select
                    name="role"
                    value={newUserData.role}
                    onChange={handleNewUserChange}
                    variant="outlined"
                  >
                    <MenuItem value="user">User</MenuItem>
                    <MenuItem value="admin">Admin</MenuItem>
                  </Select>
                </FormControl>
                <Button variant="contained" color="primary" type="submit" fullWidth>
                  Add User
                </Button>
              </form>
            </Box>
          </Paper>
        </Grid>
      </Grid>
    </Container>
  );
};

export default AdminPage;
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { toast } from "react-toastify";
import axios from "../utils/axiosConfig";
import { TextField, Button, Box, Typography, Paper, Avatar } from "@mui/material";
import LockOutlinedIcon from "@mui/icons-material/LockOutlined";

const LoginPage = ({ setIsAuthenticated, setUserRole }) => {
  const [loginData, setLoginData] = useState({ username: "", password: "" });
  const navigate = useNavigate();

  const handleChange = (e) => {
    const { name, value } = e.target;
    setLoginData({ ...loginData, [name]: value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
        const response = await axios.post("/auth/login", loginData); // Adjust URL based on your API structure
        const { token } = response.data;

        // Log the received token
        console.log("Received token:", token);

        // Store the token in localStorage
        localStorage.setItem("token", token);

        // Decode token to get the user role
        const payload = JSON.parse(atob(token.split(".")[1]));
        console.log("User Role:", payload.role); // Log the user role
        setUserRole(payload.role); // Set the user role in state
        setIsAuthenticated(true);

        toast.success("Login successful!");
        navigate("/"); // Redirect to the home page
    } catch (error) {
        toast.error("Invalid username or password");
    }
};

  return (
    <Box
      display="flex"
      justifyContent="center"
      alignItems="center"
      minHeight="100vh"
      bgcolor="#f4f4f4"
    >
      <Paper elevation={3} sx={{ padding: "30px", maxWidth: "400px", width: "100%" }}>
        <Box display="flex" flexDirection="column" alignItems="center">
          <Avatar sx={{ m: 1, bgcolor: "secondary.main" }}>
            <LockOutlinedIcon />
          </Avatar>
          <Typography component="h1" variant="h5">
            Login
          </Typography>
        </Box>
        <Box component="form" onSubmit={handleSubmit} mt={2}>
          <TextField
            margin="normal"
            required
            fullWidth
            id="username"
            label="Username"
            name="username"
            autoComplete="username"
            autoFocus
            value={loginData.username}
            onChange={handleChange}
          />
          <TextField
            margin="normal"
            required
            fullWidth
            name="password"
            label="Password"
            type="password"
            id="password"
            autoComplete="current-password"
            value={loginData.password}
            onChange={handleChange}
          />
          <Typography variant="body2" color="black" align="center" mt={2} mb={1}>
            If you need Receipt Generator full access, please get in touch with us.
          </Typography>
          <Button
            type="submit"
            fullWidth
            variant="contained"
            sx={{ mt: 3, mb: 2 }}
          >
            Login
          </Button>
        </Box>
      </Paper>
    </Box>
  );
};

export default LoginPage;
import React, { useState } from "react";
import AppBar from "@mui/material/AppBar";
import Toolbar from "@mui/material/Toolbar";
import Typography from "@mui/material/Typography";
import Button from "@mui/material/Button";
import IconButton from "@mui/material/IconButton";
import MenuIcon from "@mui/icons-material/Menu";
import { useNavigate } from "react-router-dom";
import Box from "@mui/material/Box";
import TelegramIcon from "@mui/icons-material/Telegram";
import WhatsAppIcon from "@mui/icons-material/WhatsApp";
import EmailIcon from "@mui/icons-material/Email";
import AnnouncementIcon from "@mui/icons-material/Announcement";

function Navbar({
  isAuthenticated,
  setIsAuthenticated,
  userRole,
  setUserRole,
}) {
  const navigate = useNavigate();
  const [showContact, setShowContact] = useState(false);

  const handleLogout = () => {
    localStorage.removeItem("token"); // Remove token from localStorage
    setIsAuthenticated(false);
    setUserRole(null);
    navigate("/login");
  };

  return (
    <AppBar position="static">
      <Toolbar>
        <IconButton
          size="large"
          edge="start"
          color="inherit"
          aria-label="menu"
          sx={{ mr: 2 }}
        >
          <MenuIcon />
        </IconButton>
        <Typography
          variant="h6"
          component="div"
          sx={{ flexGrow: 1 }}
          onClick={() => navigate("/")}
          style={{ cursor: "pointer" }}
        >
          Receipt Generator
        </Typography>
        {isAuthenticated ? (
          <>
            <Button color="inherit" onClick={() => navigate("/generate")}>
              Generate
            </Button>
            {userRole === "admin" && (
              <Button color="inherit" onClick={() => navigate("/admin")}>
                Admin
              </Button>
            )}
            <Button color="inherit" onClick={() => navigate("/history")}>
              History
            </Button>
            <Box
              sx={{ position: "relative" }}
              onMouseEnter={() => setShowContact(true)}
              onMouseLeave={() => setShowContact(false)}
            >
              <Button color="inherit">Contact</Button>
              {showContact && (
                <Box
                  sx={{
                    position: "absolute",
                    top: "100%",
                    left: 0,
                    display: "flex",
                    flexDirection: "column",
                    bgcolor: "background.paper",
                    p: 1,
                    borderRadius: 1,
                    boxShadow: 3,
                  }}
                >
                  <Button
                    startIcon={<TelegramIcon />}
                    href="https://t.me/IDTemaplate"
                    target="_blank"
                    sx={{ justifyContent: "flex-start" }}
                  >
                    Telegram
                  </Button>
                  <Button
                    startIcon={<WhatsAppIcon />}
                    href="https://wa.me/+13473435837"
                    target="_blank"
                    sx={{ justifyContent: "flex-start" }}
                  >
                    WhatsApp
                  </Button>
                  <Button
                    startIcon={<EmailIcon />}
                    href="mailto:idtemplate.psd@gmail.com"
                    target="_blank"
                    sx={{ justifyContent: "flex-start" }}
                  >
                    Mail
                  </Button>
                  {/* <Button
                    startIcon={<AnnouncementIcon />}
                    href="#" // Replace with your news link
                    sx={{ justifyContent: "flex-start" }}
                  >
                    News
                  </Button> */}
                </Box>
              )}
            </Box>
            <Button color="inherit" onClick={handleLogout}>
              Logout
            </Button>
          </>
        ) : (
          <>
            <Button color="inherit" onClick={() => navigate("/login")}>
              Login
            </Button>
            <Box
              sx={{ position: "relative" }}
              onMouseEnter={() => setShowContact(true)}
              onMouseLeave={() => setShowContact(false)}
            >
              <Button color="inherit">Contact</Button>
              {showContact && (
                <Box
                  sx={{
                    position: "absolute",
                    top: "100%",
                    left: 0,
                    display: "flex",
                    flexDirection: "column",
                    bgcolor: "background.paper",
                    p: 1,
                    borderRadius: 1,
                    boxShadow: 3,
                  }}
                >
                  <Button
                    startIcon={<TelegramIcon />}
                    href="https://t.me/IDTemaplate"
                    target="_blank"
                    sx={{ justifyContent: "flex-start" }}
                  >
                    Telegram
                  </Button>
                  <Button
                    startIcon={<WhatsAppIcon />}
                    href="https://wa.me/+13473435837"
                    target="_blank"
                    sx={{ justifyContent: "flex-start" }}
                  >
                    WhatsApp
                  </Button>
                  <Button
                    startIcon={<EmailIcon />}
                    href="mailto:idtemplate.psd@gmail.com"
                    target="_blank"
                    sx={{ justifyContent: "flex-start" }}
                  >
                    Mail
                  </Button>
                  {/* <Button
                    startIcon={<AnnouncementIcon />}
                    href="#" // Replace with your news link
                    sx={{ justifyContent: "flex-start" }}
                  >
                    News
                  </Button> */}
                </Box>
              )}
            </Box>
            <Button color="inherit" onClick={() => navigate("/generate")}>
              Generate
            </Button>
            
          </>
        )}
      </Toolbar>
    </AppBar>
  );
}

export default Navbar;
import React, { useEffect, useRef, useState } from "react";
import Barcode from "react-barcode";
import logo from "../assets/logo.jpg";
import { Button, Box } from "@mui/material";
import { useReactToPrint } from "react-to-print";
import html2canvas from "html2canvas";
import { useLocation } from "react-router-dom";
import axios from "../utils/axiosConfig";

const Receipt = ({
  formData,
  time12,
  ampm,
  formatDate,
  formatDateWithFullYear,
  getTotal,
  calculateSubtotal,
  getChargeDue,
  containerClass,
}) => {
  const receiptRef = useRef(null);
  const [barcodeImage, setBarcodeImage] = useState(null);
  const barcodeRef = useRef(null);
  const location = useLocation();

  const isReceiptPage = location.pathname === "/receipt";

  useEffect(() => {
    if (barcodeImage) return;

    const handleBarcodeRender = (svg) => {
      const svgData = new XMLSerializer().serializeToString(svg);
      const svgBlob = new Blob([svgData], {
        type: "image/svg+xml;charset=utf-8",
      });
      const url = URL.createObjectURL(svgBlob);

      const img = new Image();
      img.onload = () => {
        const canvas = document.createElement("canvas");
        canvas.width = img.width;
        canvas.height = img.height;
        const ctx = canvas.getContext("2d");
        ctx.drawImage(img, 0, 0);
        setBarcodeImage(canvas.toDataURL("image/png"));
        URL.revokeObjectURL(url);
      };
      img.src = url;
    };

    // Generate the barcode image only if formData is available
    if (formData.barcode) {
      handleBarcodeRender(receiptRef.current.querySelector("svg"));
    }
  }, [formData.barcode, barcodeImage]);

  useEffect(() => {
    const saveReceiptAsPngAutomatically = async () => {
      const node = receiptRef.current;
      try {
        const canvas = await html2canvas(node, {
          backgroundColor: "#fff",
          useCORS: true,
          allowTaint: true,
          scale: 2,
        });

        // Convert canvas to data URL
        const pngData = canvas.toDataURL("image/png");

        // Send the PNG data to the backend
        const response = await axios.post("/api/receipts/save", {
          pngData, // Base64 encoded PNG data
          filename: `receipt_${new Date().getTime()}.png`, // Generate a unique filename
        });

        console.log("Receipt saved automatically:", response.data.message);
      } catch (error) {
        console.error("Error automatically saving the receipt as PNG:", error);
      }
    };

    if (formData && isReceiptPage) {
      saveReceiptAsPngAutomatically();
    }
  }, [formData]);

  const handleSaveAsPng = () => {
    const node = receiptRef.current;
    html2canvas(node, {
      backgroundColor: "#fff",
      useCORS: true,
      allowTaint: true,
      scale: 2,
    })
      .then((canvas) => {
        const link = document.createElement("a");
        link.download = "receipt.png";
        link.href = canvas.toDataURL("image/png");
        link.click();
      })
      .catch((error) => {
        console.error("Could not generate image", error);
      });
  };

  const handlePrint = useReactToPrint({
    content: () => receiptRef.current,
  });

  return (
    <div>
      <div ref={receiptRef} className={containerClass}>
        <div className="logo_container">
          <img className="logo" src={logo} alt="logo" />
        </div>
        <div className="address_name">
          <p className="address">{formData.address}</p>
          <div className="name_code">
            <p className="name">STORE MGR {formData.managerName}</p>
            <p className="code">
              {formData.managerCode.substring(0, 3)}-
              {formData.managerCode.substring(3, 6)}-
              {formData.managerCode.substring(6, 10)}
            </p>
          </div>
        </div>
        <div className="date_time_status">
          <div>
            <p>
              {formData.dateTimeStatusCode?.substring(0, 4)}&nbsp;&nbsp;
              {formData.dateTimeStatusCode?.substring(4, 9)}&nbsp;&nbsp;
              {formData.dateTimeStatusCode?.substring(9, 14)}
            </p>
            <p>{formData.dateTimeStatusType}</p>
          </div>
          <div className="date_time">
            <p>{formatDate(formData.date)}</p>
            <p>
              {time12} {ampm}
            </p>
          </div>
        </div>
        <div className="products">
          {formData.products.map((product, index) => (
            <div className="product" key={index}>
              <p className="product_name">
                <span className="text-content">
                  {product.productId}{" "}
                  {product.productName.split("<A>")[0] +
                    (product.productName.includes("<A>") ? "<A>" : "")}
                  {product.productDescription2 && <br />}
                  {product.productDescription2}
                  {product.productDescription3 && <br />}
                  {product.productDescription3}
                  {product.productDescription4 && <br />}
                  {product.productDescription4}
                  {product.productDescription5 && <br />}
                  {product.productDescription5}
                  {product.productDescription6 && <br />}
                  {product.productDescription6}
                </span>
              </p>
              <p>{parseFloat(product?.productPrice).toFixed(2)}</p>
            </div>
          ))}
        </div>
        <div className="calculation">
          <div className="subtotal">
            <p>SUBTOTAL</p>
            <p>{calculateSubtotal()}</p>
          </div>
          <div className="sales_tax">
            <p>SALES TAX</p>
            <p>{parseFloat(formData?.tax).toFixed(2)}</p>
          </div>
          <div className="total">
            <p>TOTAL</p>
            <p>${getTotal()}</p>
          </div>
          <div className="cash">
            <p>CASH</p>
            <p>{parseFloat(formData?.cashAmount).toFixed(2)}</p>
          </div>
          <div className="charge_due">
            <p>CHANGE DUE</p>
            <p>{getChargeDue()}</p>
          </div>
        </div>
        <div className="barcode">
          <p className="barcode_time_date">
            <span>{formData.dateTimeStatusCode?.substring(0, 4)}</span>
            <span>{formatDate(formData.date)}</span>
            <span>{time12}</span>
            <span>{ampm}</span>
          </p>
          {isReceiptPage ? (
            barcodeImage ? (
              <img
                src={barcodeImage}
                alt="Barcode"
                style={{
                  display: "block",
                  margin: "0 auto",
                  maxWidth: "85%",
                  height: "auto",
                }}
              />
            ) : (
              // <div id="barcode" ref={barcodeRef} style={{ display: "flex", justifyContent: "center" }}>
              //   <Barcode value={formData.barcode} width={1.5} height={45} fontSize={0} />
              // </div>
              <>
                <Barcode value={formData.barcode} width={3.5} fontSize={0} />
              </>
            )
          ) : (
            <Barcode
              value={formData.barcode}
              width={3.5}
              // height={50}
              fontSize={0}
            />
          )}
          <p className="barcode_lower">
            {formData.dateTimeStatusCode?.substring(0, 4) +
              " " +
              formData.dateTimeStatusCode?.substring(7, 9) +
              " " +
              formData.dateTimeStatusCode?.substring(9, 14) +
              " " +
              formatDateWithFullYear(formData.date) +
              " " +
              formData.barcodeFour}
          </p>
        </div>
        <div className="return_policy">
          <p className="title">RETURN POLICY DEFINITIONS</p>
          <div className="expire">
            <p>A</p>
            <div>
              <p>POLICY ID</p>
              <p className="center">{formData.policyId}</p>
            </div>
            <div>
              <p>DAYS</p>
              <p className="center">{formData.policyDays}</p>
            </div>
            <div>
              <p>POLICY EXPIRES ON</p>
              <p className="center">
                {formatDateWithFullYear(formData.policyDate)}
              </p>
            </div>
          </div>
        </div>
        {formData.showSecondPart && (
          <>
            <p className="star">*******************************************</p>{" "}
            <p className="did_we_nail_it">DID WE NAIL IT?</p>
            <div className="footer">
              <p>
                Take a short survey for a chance TO WIN A $5,000 HOME DEPOT GIFT
                CARD
              </p>
              <div className="middle">
                <p>Opine en español</p>
                <p className="link">wwww.homedepot.com/survey</p>
                <div>
                  <p>
                    User ID: {formData.userId?.substring(0, 3)}{" "}
                    {formData.userId?.substring(3, 9)}{" "}
                    {formData.userId?.substring(9, 15)}
                  </p>
                  <p>
                    PASSWORD: {formData.userPassword?.substring(0, 5)}{" "}
                    {formData.userPassword?.substring(5, 11)}
                  </p>
                </div>
              </div>
              <p>
                Entries must be completed within 14 days Of purchase. Entrants
                must be 18 or Older to enter. See the complete rules on website.
                No purchase necessary.
              </p>
            </div>
          </>
        )}
      </div>
      {/* Buttons to Save as PNG and Print */}
      {isReceiptPage && (
        <Box mt={2} display="flex" justifyContent="center" gap={2}>
          <Button variant="contained" color="primary" onClick={handleSaveAsPng}>
            Save as PNG
          </Button>
          <Button variant="contained" color="secondary" onClick={handlePrint}>
            Print
          </Button>
        </Box>
      )}
    </div>
  );
};

export default Receipt;
import React from "react";
import { useLocation } from "react-router-dom";
import Receipt from "./receipt";

const ReceiptPage = () => {
  const location = useLocation();
  const formData = location.state?.formData;
  const time12 = location.state?.time12;
  const ampm = location.state?.ampm;

  // Define necessary functions in this component
  const formatDate = (dateStr) => {
    if (!dateStr) return "";
    const [year, month, day] = dateStr.split("-");
    return `${month}/${day}/${year.slice(2)}`;
  };

  const formatDateWithFullYear = (dateStr) => {
    if (!dateStr) return "";
    const [year, month, day] = dateStr.split("-");
    return `${month}/${day}/${year}`;
  };

  const calculateSubtotal = () => {
    return formData.products
      .reduce((sum, product) => {
        const price = parseFloat(product.productPrice) || 0;
        return sum + price;
      }, 0)
      .toFixed(2);
  };

  const getTotal = () => {
    const subtotal = parseFloat(calculateSubtotal()) || 0;
    const tax = parseFloat(formData.tax) || 0;
    return (subtotal + tax).toFixed(2);
  };

  const getChargeDue = () => {
    const total = parseFloat(getTotal()) || 0;
    const cashAmount = parseFloat(formData.cashAmount) || 0;
    return (cashAmount - total).toFixed(2);
  };

  return (
    <div>
      {formData ? (
        <Receipt
          formData={formData}
          time12={time12}
          ampm={ampm}
          formatDate={formatDate}
          formatDateWithFullYear={formatDateWithFullYear}
          calculateSubtotal={calculateSubtotal}
          getTotal={getTotal}
          getChargeDue={getChargeDue}
          containerClass="container"
        />
      ) : (
        <p>No receipt data available</p>
      )}
    </div>
  );
};

export default ReceiptPage;
import React, { useEffect, useState } from "react";
import { Box, Typography, IconButton, List, ListItem, ListItemText, ListItemSecondaryAction, Divider, Pagination, Tooltip, Modal } from "@mui/material";
import { Preview, Delete, Download } from "@mui/icons-material";
import axios from '../utils/axiosConfig';

const HistoryPage = () => {
  const [receipts, setReceipts] = useState([]);
  const [page, setPage] = useState(1);
  const [selectedReceipt, setSelectedReceipt] = useState(null);
  const [previewOpen, setPreviewOpen] = useState(false);
  const limit = 100;

  useEffect(() => {
    const token = localStorage.getItem('token');
    console.log('Token in HistoryPage:', token);
    fetchReceipts();
  }, [page]);

  const fetchReceipts = async () => {
    try {
      const response = await axios.get('/api/receipts', {
        params: { page, limit }
      });
      console.log('Fetched receipts:', response.data.files);
      setReceipts(response.data.files);
    } catch (error) {
      console.error('Could not fetch receipts', error);
    }
  };

  const handleDownload = async (filename) => {
    try {
      const response = await axios.get(`/api/receipts/download/${filename}`, {
        responseType: 'blob',
      });
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', filename);
      document.body.appendChild(link);
      link.click();
      link.remove();
    } catch (error) {
      console.error('Could not download receipt', error);
    }
  };

  const handleDelete = async (filename) => {
    try {
      await axios.delete(`/api/receipts/${filename}`);
      fetchReceipts();
    } catch (error) {
      console.error('Could not delete receipt', error);
    }
  };

  const handlePreview = async (filename) => {
    try {
      const response = await axios.get(`/api/receipts/download/${filename}`, {
        responseType: 'blob',
      });
      const url = window.URL.createObjectURL(new Blob([response.data]));
      setSelectedReceipt(url);
      setPreviewOpen(true);
    } catch (error) {
      console.error('Could not preview receipt', error);
    }
  };

  const handleClosePreview = () => {
    setPreviewOpen(false);
    setSelectedReceipt(null);
  };

  return (
    <Box sx={{ p: 4, bgcolor: '#f0f2f5', minHeight: '100vh' }}>
      <Typography variant="h4" component="h2" gutterBottom sx={{ textAlign: 'center', mb: 4 }}>
        Receipt History
      </Typography>
      <List sx={{ maxWidth: '800px', margin: '0 auto', bgcolor: 'white', borderRadius: 2, boxShadow: 2 }}>
        {receipts.map((file, index) => (
          <React.Fragment key={index}>
            <ListItem
              sx={{
                py: 1,
                px: 3,
                '&:hover': {
                  backgroundColor: '#f5f5f5',
                },
              }}
            >
              <ListItemText
                primary={file}
                primaryTypographyProps={{
                  variant: 'body1',
                  noWrap: true,
                  sx: { fontWeight: 500 },
                }}
              />
              <ListItemSecondaryAction>
                <Tooltip title="Preview">
                  <IconButton color="primary" onClick={() => handlePreview(file)}>
                    <Preview />
                  </IconButton>
                </Tooltip>
                <Tooltip title="Download">
                  <IconButton color="primary" onClick={() => handleDownload(file)}>
                    <Download />
                  </IconButton>
                </Tooltip>
                <Tooltip title="Delete">
                  <IconButton color="secondary" onClick={() => handleDelete(file)}>
                    <Delete />
                  </IconButton>
                </Tooltip>
              </ListItemSecondaryAction>
            </ListItem>
            {index < receipts.length - 1 && <Divider />}
          </React.Fragment>
        ))}
      </List>
      <Box sx={{ mt: 4, display: 'flex', justifyContent: 'center' }}>
        <Pagination
          count={Math.ceil(receipts.length / limit)}
          page={page}
          onChange={(e, value) => setPage(value)}
          color="primary"
        />
      </Box>

      {/* Modal for Preview */}
      <Modal open={previewOpen} onClose={handleClosePreview}>
        <Box
          sx={{
            position: 'absolute',
            top: '50%',
            left: '50%',
            transform: 'translate(-50%, -50%)',
            width: '90%',
            maxWidth: '600px',
            bgcolor: 'background.paper',
            borderRadius: 1,
            boxShadow: 24,
            p: 2,
            overflowY: 'auto',
            maxHeight: '90vh',
          }}
        >
          <img
            src={selectedReceipt}
            alt="Receipt Preview"
            style={{
              width: '100%',
              height: 'auto',
              maxHeight: '80vh',
              objectFit: 'contain',
            }}
          />
        </Box>
      </Modal>
    </Box>
  );
};

export default HistoryPage;
import axios from 'axios';

// Set the base URL for all axios requests
const apiUrl = import.meta.env.VITE_API_URL || 'http://localhost:3000';

const axiosInstance = axios.create({
  baseURL: apiUrl,
});

// Attach the token to the request
axiosInstance.interceptors.request.use((config) => {
  const token = localStorage.getItem('token');
  console.log('Extracted Token:', token);

  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  } else {
    console.error('No token found in localStorage');
  }

  return config;
}, (error) => {
  return Promise.reject(error);
});

export default axiosInstance;
